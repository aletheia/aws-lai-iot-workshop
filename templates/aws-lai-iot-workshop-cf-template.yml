AWSTemplateFormatVersion: "2010-09-09"
Resources:
  CognitoManagerFunctionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: aws_lai_workshop_cognito_manager_role_policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
          - cognito-identity:CreateIdentityPool
          - cognito-identity:DeleteIdentityPool
          - cognito-identity:UpdateIdentityPool
          - cognito-identity:SetIdentityPoolRoles
          Resource: "*"
      Roles:
      - Ref: CognitoManagerFunctionRole
  CognitoManagerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aws_lai_workshop_cognito_manager_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
  CognitoManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: A Lambda function to handle cognito identity pool creation and deletion
      FunctionName: aws_iot_workshop_cognito_manager
      Runtime: nodejs4.3
      Handler: index.handler
      Role:
        "Fn::GetAtt": ["CognitoManagerFunctionRole","Arn"]
      Code:
        ZipFile: |
          'use strict';var https=require('https'),url=require('url'),AWS=require('aws-sdk'),cognitoidentity=new AWS.CognitoIdentity,SUCCESS='SUCCESS',FAILED='FAILED',UNKNOWN={Error:'Unknown operation'},requestTypes=['Create','Update','Delete'],handleIdentityPoolOperation=function handleIdentityPoolOperation(a,b,c){function d(g,h,i){var j=JSON.stringify({Status:g,Reason:'See the details in CloudWatch Log Stream: '+b.logStreamName,PhysicalResourceId:i||b.logStreamName,StackId:a.StackId,RequestId:a.RequestId,LogicalResourceId:a.LogicalResourceId,Data:h});console.log('Response body:\n',j);var k=url.parse(a.ResponseURL),l={hostname:k.hostname,port:443,path:k.path,method:'PUT',headers:{'content-type':'','content-length':j.length}};return new Promise(function(m,n){var o=https.request(l,m);o.on('error',function(p){return n('send(..) failed executing https.request(..): '+p)}),o.write(j),o.end()}).then(function(){return c(g===FAILED?g:null,h)}).catch(c)}function e(g,h){cognitoidentity.createIdentityPool({AllowUnauthenticatedIdentities:!0,IdentityPoolName:g}).promise().then(function(i){var j={IdentityPoolId:i.IdentityPoolId,Roles:{authenticated:h,unauthenticated:h}};return cognitoidentity.setIdentityPoolRoles(j).promise()}).then(function(i){return d(SUCCESS,i,i.IdentityPoolId)}).catch(function(i){return d(FAILED,{message:i})})}function f(g){cognitoidentity.deleteIdentityPool({IdentityPoolId:g}).promise().then(function(h){return d(SUCCESS,h,h.IdentityPoolId)}).catch(function(h){return d(FAILED,{message:h})})}switch(console.log('Performing operation '+a.RequestType+' on Cognito Identity Pool '+a.LogicalResourceId),a.RequestType){case'Create':e(a.ResourceProperties.IdentityPoolName,a.ResourceProperties.IAMRole);break;case'Delete':f(a.PhysicalResourceId);break;case'Update':e(a.ResourceProperties.IdentityPoolName,a.ResourceProperties.IAMRole),f(a.PhysicalResourceId);break;default:c('Something went wrong');}};exports.handler=handleIdentityPoolOperation;
  CognitoIdentity:
    Type: Custom::CognitoIdentity
    Properties:
      ServiceToken:
        "Fn::GetAtt": ["CognitoManagerFunction","Arn"]
      IdentityPoolName: aws_lai_workshop_drones_identity_pool
      IAMRole:
        "Fn::GetAtt": ["CognitoManagerFunctionRole","Arn"]
  DroidsRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: aws_lai_workshop_policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:Connect
          - iot:Publish
          - iot:Subscribe
          - iot:Receive
          - iot:GetThingShadow
          - iot:UpdateThingShadow
          Resource: "*"
        - Effect: Allow
          Action:
          - mobileanalytics:PutEvents
          - cognito-sync:*
          - cognito-identity:*
          Resource:
          - "*"
      Roles:
      - Ref: DroidsRole
  DroidsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aws_lai_workshop_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
  DroidsNotifyTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: "SNS Topic to Notify through e-mail/sms"
      TopicName: "DroidsTopic"
      # Subscription property will be set during workshop
  Droids:
    Type: "AWS::IoT::Thing"
    Properties:
      ThingName: "DroidSampleThing"
  DroidsDataSourceStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: droids-data-src-stream
      ShardCount: 1
Outputs:
  DroidsTopicArn:
    Description: "ARN of SNS topic used to notify iot things"
    Value:
      Ref: DroidsNotifyTopic
  DroidsDataSourceStreamName:
    Description: "Name of the source stream for IoT data"
    Value:
      Ref: DroidsDataSourceStream
  DroidsRoleName:
    Description: IAM Role associated to this workshop
    Value:
      "Fn::GetAtt": ["DroidsRole","Arn"]
  CognitoManagerFunction:
    Value:
      "Fn::GetAtt": ["CognitoManagerFunction","Arn"]
  CognitoManagerFunctionRole:
    Value:
      "Fn::GetAtt": ["CognitoManagerFunctionRole","Arn"]
  DroidsIdentityPool:
    Description: Identity pool related to droids swarm
    Value:
      "Fn::GetAtt": ["CognitoIdentity","PhysicalResourceId"]
